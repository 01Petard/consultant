name: Deploy AI Consultant Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.8.1'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      continue-on-error: true
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always() && hashFiles('target/surefire-reports/*.xml') != ''
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build Application
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean compile package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact
        path: target/*.jar

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    name: Build Docker Image
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: jar-artifact
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name != 'pull_request'
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ai-consultant
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      if: ${{ secrets.STAGING_HOST != '' }}
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # 停止现有容器
          docker stop ai-consultant-staging || true
          docker rm ai-consultant-staging || true
          
          # 拉取最新镜像
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-consultant:latest
          
          # 启动新容器
          docker run -d \
            --name ai-consultant-staging \
            --restart unless-stopped \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=staging \
            -e SPRING_DATASOURCE_URL="${{ secrets.STAGING_DB_URL }}" \
            -e SPRING_DATASOURCE_USERNAME="${{ secrets.STAGING_DB_USER }}" \
            -e SPRING_DATASOURCE_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}" \
            -e SPRING_DATA_REDIS_HOST="${{ secrets.STAGING_REDIS_HOST }}" \
            -e SPRING_DATA_REDIS_PASSWORD="${{ secrets.STAGING_REDIS_PASSWORD }}" \
            -e LANGCHAIN4J_OPENAI_CHATMODEL_APIKEY="${{ secrets.OPENAI_API_KEY }}" \
            -e LANGCHAIN4J_OPENAI_EMBEDDINGMODEL_APIKEY="${{ secrets.OPENAI_API_KEY }}" \
            ${{ secrets.DOCKER_USERNAME }}/ai-consultant:latest
            
          # 健康检查
          sleep 30
          curl -f http://localhost:8080/hello || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      if: ${{ secrets.PROD_HOST != '' }}
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          # 停止现有容器
          docker stop ai-consultant-prod || true
          docker rm ai-consultant-prod || true
          
          # 拉取最新镜像
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-consultant:latest
          
          # 启动新容器
          docker run -d \
            --name ai-consultant-prod \
            --restart unless-stopped \
            -p 80:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e SPRING_DATASOURCE_URL="${{ secrets.PROD_DB_URL }}" \
            -e SPRING_DATASOURCE_USERNAME="${{ secrets.PROD_DB_USER }}" \
            -e SPRING_DATASOURCE_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}" \
            -e SPRING_DATA_REDIS_HOST="${{ secrets.PROD_REDIS_HOST }}" \
            -e SPRING_DATA_REDIS_PASSWORD="${{ secrets.PROD_REDIS_PASSWORD }}" \
            -e LANGCHAIN4J_OPENAI_CHATMODEL_APIKEY="${{ secrets.OPENAI_API_KEY }}" \
            -e LANGCHAIN4J_OPENAI_EMBEDDINGMODEL_APIKEY="${{ secrets.OPENAI_API_KEY }}" \
            ${{ secrets.DOCKER_USERNAME }}/ai-consultant:latest
            
          # 健康检查
          sleep 30
          curl -f http://localhost:8080/hello || exit 1
